{"ast":null,"code":"var _jsxFileName = \"/Users/esra/Desktop/battleships_royale/src/Square.js\";\nimport { toHaveStyle } from '@testing-library/jest-dom/dist/matchers';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { shipSelected } from './RunGame.js';\nimport { shipOrient } from './RunGame.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hitStatus: this.props.square.hitStatus,\n      index: this.props.index\n    };\n    this.handleClick = this.handleClick.bind(this);\n  } // this.props.index => the index within the grid array\n  // this.state.status => status of the square in the array\n  // \n\n\n  handleClick() {\n    if (shipOrient === 'horizontal') {\n      var newGridArray = this.props.gridArray.map((square, i) => {\n        if (this.props.index === i && (shipSelected === 'ship1' || shipSelected === 'ship2' || shipSelected === 'ship3' || shipSelected === 'ship4')) {\n          return { ...square,\n            shipStatus: 'ship'\n          };\n        } else if (this.props.index + 1 === i && (shipSelected === 'ship2' || shipSelected === 'ship3' || shipSelected === 'ship4')) {\n          return { ...square,\n            shipStatus: 'ship'\n          };\n        } else if (this.props.index + 2 === i && (shipSelected === 'ship3' || shipSelected === 'ship4')) {\n          return { ...square,\n            shipStatus: 'ship'\n          };\n        } else if (this.props.index + 3 === i && shipSelected === 'ship4') {\n          return { ...square,\n            shipStatus: 'ship'\n          };\n        } else {\n          return square;\n        }\n      });\n      this.props.setGridArray(newGridArray);\n    }\n\n    if (shipOrient === 'vertical') {\n      var newGridArray = this.props.gridArray.map((square, i) => {\n        if (this.props.index === i && (shipSelected === 'ship1' || shipSelected === 'ship2' || shipSelected === 'ship3' || shipSelected === 'ship4')) {\n          return { ...square,\n            shipStatus: 'ship'\n          };\n        } else if (this.props.index + 4 === i && (shipSelected === 'ship2' || shipSelected === 'ship3' || shipSelected === 'ship4')) {\n          return { ...square,\n            shipStatus: 'ship'\n          };\n        } else if (this.props.index + 8 === i && (shipSelected === 'ship3' || shipSelected === 'ship4')) {\n          return { ...square,\n            shipStatus: 'ship'\n          };\n        } else if (this.props.index + 12 === i && shipSelected === 'ship4') {\n          return { ...square,\n            shipStatus: 'ship'\n          };\n        } else {\n          return square;\n        }\n      });\n      console.log(newGridArray);\n      this.props.setGridArray(newGridArray);\n    }\n  } // This handleClick can be used in the player2/3 board. On clicking the square, it would need to:\n  // Check to see if this square in the player's array has a ship, if so, change hitStatus to hit\n  // If it does NOT have a ship, change hitStatus to miss\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `player square ${this.props.square.shipStatus}`,\n      id: `play1_square_${this.props.index}`,\n      onClick: () => {\n        this.handleClick();\n      },\n      children: \" \"\n    }, `square_${this.props.index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"names":["toHaveStyle","React","ReactDOM","shipSelected","shipOrient","Square","Component","constructor","props","state","hitStatus","square","index","handleClick","bind","newGridArray","gridArray","map","i","shipStatus","setGridArray","console","log","render"],"sources":["/Users/esra/Desktop/battleships_royale/src/Square.js"],"sourcesContent":["import { toHaveStyle } from '@testing-library/jest-dom/dist/matchers';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {shipSelected} from './RunGame.js';\nimport {shipOrient} from './RunGame.js';\n\nexport class Square extends React.Component {  \n  constructor(props) {\n    super(props);\n    this.state = {\n      hitStatus: this.props.square.hitStatus,\n      index: this.props.index\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  // this.props.index => the index within the grid array\n\n  // this.state.status => status of the square in the array\n\n  // \n  \n\n  handleClick () {\n    if (shipOrient === 'horizontal'){\n      var newGridArray = this.props.gridArray.map((square, i) => {\n        if(this.props.index === i && (shipSelected === 'ship1'|| shipSelected === 'ship2' || shipSelected === 'ship3'|| shipSelected === 'ship4')){\n          return {\n            ...square,\n            shipStatus: 'ship',\n          };\n        } else if (this.props.index + 1 === i && (shipSelected === 'ship2' || shipSelected === 'ship3' || shipSelected === 'ship4')){\n          return {\n            ...square,\n            shipStatus: 'ship',};\n        } else if (this.props.index + 2 === i && (shipSelected === 'ship3' || shipSelected === 'ship4')){\n          return {\n            ...square,\n            shipStatus: 'ship',};\n        } else if (this.props.index + 3 === i && (shipSelected === 'ship4')){\n          return {\n            ...square,\n            shipStatus: 'ship',};\n        } else {\n          return square\n        }\n\n      })\n      this.props.setGridArray(newGridArray)\n    }\n\n    if (shipOrient === 'vertical'){\n      var newGridArray = this.props.gridArray.map((square, i) => {\n        if(this.props.index === i && (shipSelected === 'ship1'|| shipSelected === 'ship2' || shipSelected === 'ship3'|| shipSelected === 'ship4')){\n          return {\n            ...square,\n            shipStatus: 'ship',\n          };\n        } else if (this.props.index + 4 === i && (shipSelected === 'ship2' || shipSelected === 'ship3' || shipSelected === 'ship4')){\n          return {\n            ...square,\n            shipStatus: 'ship',};\n        } else if (this.props.index + 8 === i && (shipSelected === 'ship3' || shipSelected === 'ship4')){\n          return {\n            ...square,\n            shipStatus: 'ship',};\n        } else if (this.props.index + 12 === i && (shipSelected === 'ship4')){\n          return {\n            ...square,\n            shipStatus: 'ship',};\n        } else {\n          return square\n        }\n\n      })\n      console.log(newGridArray)\n      this.props.setGridArray(newGridArray)\n    }\n  }\n\n  // This handleClick can be used in the player2/3 board. On clicking the square, it would need to:\n  // Check to see if this square in the player's array has a ship, if so, change hitStatus to hit\n  // If it does NOT have a ship, change hitStatus to miss\n\n  render(){\n    return(\n      <div className={`player square ${this.props.square.shipStatus}`} id={`play1_square_${this.props.index}`} key={`square_${this.props.index}`} onClick={() => {this.handleClick()}}> </div>\n  )\n}}"],"mappings":"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"},"metadata":{},"sourceType":"module"}